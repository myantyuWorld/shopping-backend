// Code generated by MockGen. DO NOT EDIT.
// Source: shopping_item_output.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	model "github.com/LeoTwins/go-clean-architecture/internal/domain/model"
	dto "github.com/LeoTwins/go-clean-architecture/internal/usecase/dto"
	gomock "github.com/golang/mock/gomock"
)

// MockIShoppingItemPresenter is a mock of IShoppingItemPresenter interface.
type MockIShoppingItemPresenter struct {
	ctrl     *gomock.Controller
	recorder *MockIShoppingItemPresenterMockRecorder
}

// MockIShoppingItemPresenterMockRecorder is the mock recorder for MockIShoppingItemPresenter.
type MockIShoppingItemPresenterMockRecorder struct {
	mock *MockIShoppingItemPresenter
}

// NewMockIShoppingItemPresenter creates a new mock instance.
func NewMockIShoppingItemPresenter(ctrl *gomock.Controller) *MockIShoppingItemPresenter {
	mock := &MockIShoppingItemPresenter{ctrl: ctrl}
	mock.recorder = &MockIShoppingItemPresenterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIShoppingItemPresenter) EXPECT() *MockIShoppingItemPresenterMockRecorder {
	return m.recorder
}

// Output mocks base method.
func (m *MockIShoppingItemPresenter) Output(arg0 model.ShoppingItem) dto.ShoppingItemOutput {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Output", arg0)
	ret0, _ := ret[0].(dto.ShoppingItemOutput)
	return ret0
}

// Output indicates an expected call of Output.
func (mr *MockIShoppingItemPresenterMockRecorder) Output(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Output", reflect.TypeOf((*MockIShoppingItemPresenter)(nil).Output), arg0)
}
