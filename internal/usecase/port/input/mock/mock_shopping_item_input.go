// Code generated by MockGen. DO NOT EDIT.
// Source: shopping_item_input.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	dto "github.com/LeoTwins/go-clean-architecture/internal/usecase/dto"
	gomock "github.com/golang/mock/gomock"
)

// MockIShoppingItemUsecase is a mock of IShoppingItemUsecase interface.
type MockIShoppingItemUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIShoppingItemUsecaseMockRecorder
}

// MockIShoppingItemUsecaseMockRecorder is the mock recorder for MockIShoppingItemUsecase.
type MockIShoppingItemUsecaseMockRecorder struct {
	mock *MockIShoppingItemUsecase
}

// NewMockIShoppingItemUsecase creates a new mock instance.
func NewMockIShoppingItemUsecase(ctrl *gomock.Controller) *MockIShoppingItemUsecase {
	mock := &MockIShoppingItemUsecase{ctrl: ctrl}
	mock.recorder = &MockIShoppingItemUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIShoppingItemUsecase) EXPECT() *MockIShoppingItemUsecaseMockRecorder {
	return m.recorder
}

// Find mocks base method.
func (m *MockIShoppingItemUsecase) Find(ctx context.Context, ownerID uint) ([]*dto.ShoppingItemOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", ctx, ownerID)
	ret0, _ := ret[0].([]*dto.ShoppingItemOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockIShoppingItemUsecaseMockRecorder) Find(ctx, ownerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockIShoppingItemUsecase)(nil).Find), ctx, ownerID)
}

// Register mocks base method.
func (m *MockIShoppingItemUsecase) Register(ctx context.Context, ownerID uint, name, category string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", ctx, ownerID, name, category)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register.
func (mr *MockIShoppingItemUsecaseMockRecorder) Register(ctx, ownerID, name, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockIShoppingItemUsecase)(nil).Register), ctx, ownerID, name, category)
}

// Remove mocks base method.
func (m *MockIShoppingItemUsecase) Remove(ctx context.Context, itemID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", ctx, itemID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockIShoppingItemUsecaseMockRecorder) Remove(ctx, itemID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockIShoppingItemUsecase)(nil).Remove), ctx, itemID)
}
