// Code generated by MockGen. DO NOT EDIT.
// Source: account_input.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/LeoTwins/go-clean-architecture/internal/domain/model"
	gomock "github.com/golang/mock/gomock"
)

// MockIAccountUsecase is a mock of IAccountUsecase interface.
type MockIAccountUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIAccountUsecaseMockRecorder
}

// MockIAccountUsecaseMockRecorder is the mock recorder for MockIAccountUsecase.
type MockIAccountUsecaseMockRecorder struct {
	mock *MockIAccountUsecase
}

// NewMockIAccountUsecase creates a new mock instance.
func NewMockIAccountUsecase(ctrl *gomock.Controller) *MockIAccountUsecase {
	mock := &MockIAccountUsecase{ctrl: ctrl}
	mock.recorder = &MockIAccountUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAccountUsecase) EXPECT() *MockIAccountUsecaseMockRecorder {
	return m.recorder
}

// Deposit mocks base method.
func (m *MockIAccountUsecase) Deposit(ctx context.Context, accountID uint, amount model.Money) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deposit", ctx, accountID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deposit indicates an expected call of Deposit.
func (mr *MockIAccountUsecaseMockRecorder) Deposit(ctx, accountID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deposit", reflect.TypeOf((*MockIAccountUsecase)(nil).Deposit), ctx, accountID, amount)
}

// OpenAccount mocks base method.
func (m *MockIAccountUsecase) OpenAccount(ctx context.Context, name string, initialDeposit model.Money) (*model.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenAccount", ctx, name, initialDeposit)
	ret0, _ := ret[0].(*model.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenAccount indicates an expected call of OpenAccount.
func (mr *MockIAccountUsecaseMockRecorder) OpenAccount(ctx, name, initialDeposit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenAccount", reflect.TypeOf((*MockIAccountUsecase)(nil).OpenAccount), ctx, name, initialDeposit)
}

// Transfer mocks base method.
func (m *MockIAccountUsecase) Transfer(ctx context.Context, fromAccountID, toAccountID uint, amount model.Money) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", ctx, fromAccountID, toAccountID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transfer indicates an expected call of Transfer.
func (mr *MockIAccountUsecaseMockRecorder) Transfer(ctx, fromAccountID, toAccountID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockIAccountUsecase)(nil).Transfer), ctx, fromAccountID, toAccountID, amount)
}

// Withdraw mocks base method.
func (m *MockIAccountUsecase) Withdraw(ctx context.Context, accountID uint, amount model.Money) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", ctx, accountID, amount)
	ret0, _ := ret[0].(error)
	return ret0
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MockIAccountUsecaseMockRecorder) Withdraw(ctx, accountID, amount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockIAccountUsecase)(nil).Withdraw), ctx, accountID, amount)
}
