// Code generated by MockGen. DO NOT EDIT.
// Source: shopping_item_repository.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	model "github.com/LeoTwins/go-clean-architecture/internal/domain/model"
	gomock "github.com/golang/mock/gomock"
)

// MockIShoppingItemRepository is a mock of IShoppingItemRepository interface.
type MockIShoppingItemRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIShoppingItemRepositoryMockRecorder
}

// MockIShoppingItemRepositoryMockRecorder is the mock recorder for MockIShoppingItemRepository.
type MockIShoppingItemRepositoryMockRecorder struct {
	mock *MockIShoppingItemRepository
}

// NewMockIShoppingItemRepository creates a new mock instance.
func NewMockIShoppingItemRepository(ctrl *gomock.Controller) *MockIShoppingItemRepository {
	mock := &MockIShoppingItemRepository{ctrl: ctrl}
	mock.recorder = &MockIShoppingItemRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIShoppingItemRepository) EXPECT() *MockIShoppingItemRepositoryMockRecorder {
	return m.recorder
}

// FindByOwnerID mocks base method.
func (m *MockIShoppingItemRepository) FindByOwnerID(ctx context.Context, ownerID uint) ([]*model.ShoppingItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByOwnerID", ctx, ownerID)
	ret0, _ := ret[0].([]*model.ShoppingItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByOwnerID indicates an expected call of FindByOwnerID.
func (mr *MockIShoppingItemRepositoryMockRecorder) FindByOwnerID(ctx, ownerID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByOwnerID", reflect.TypeOf((*MockIShoppingItemRepository)(nil).FindByOwnerID), ctx, ownerID)
}

// LogicalDelete mocks base method.
func (m *MockIShoppingItemRepository) LogicalDelete(ctx context.Context, itemID uint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LogicalDelete", ctx, itemID)
	ret0, _ := ret[0].(error)
	return ret0
}

// LogicalDelete indicates an expected call of LogicalDelete.
func (mr *MockIShoppingItemRepositoryMockRecorder) LogicalDelete(ctx, itemID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogicalDelete", reflect.TypeOf((*MockIShoppingItemRepository)(nil).LogicalDelete), ctx, itemID)
}

// Save mocks base method.
func (m *MockIShoppingItemRepository) Save(ctx context.Context, item *model.ShoppingItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, item)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockIShoppingItemRepositoryMockRecorder) Save(ctx, item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockIShoppingItemRepository)(nil).Save), ctx, item)
}
