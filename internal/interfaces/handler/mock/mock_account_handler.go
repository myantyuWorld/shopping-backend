// Code generated by MockGen. DO NOT EDIT.
// Source: account_handler.go

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v4 "github.com/labstack/echo/v4"
)

// MockIAccountHandler is a mock of IAccountHandler interface.
type MockIAccountHandler struct {
	ctrl     *gomock.Controller
	recorder *MockIAccountHandlerMockRecorder
}

// MockIAccountHandlerMockRecorder is the mock recorder for MockIAccountHandler.
type MockIAccountHandlerMockRecorder struct {
	mock *MockIAccountHandler
}

// NewMockIAccountHandler creates a new mock instance.
func NewMockIAccountHandler(ctrl *gomock.Controller) *MockIAccountHandler {
	mock := &MockIAccountHandler{ctrl: ctrl}
	mock.recorder = &MockIAccountHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAccountHandler) EXPECT() *MockIAccountHandlerMockRecorder {
	return m.recorder
}

// Deposit mocks base method.
func (m *MockIAccountHandler) Deposit(c v4.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deposit", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deposit indicates an expected call of Deposit.
func (mr *MockIAccountHandlerMockRecorder) Deposit(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deposit", reflect.TypeOf((*MockIAccountHandler)(nil).Deposit), c)
}

// OpenAccount mocks base method.
func (m *MockIAccountHandler) OpenAccount(c v4.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenAccount", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// OpenAccount indicates an expected call of OpenAccount.
func (mr *MockIAccountHandlerMockRecorder) OpenAccount(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenAccount", reflect.TypeOf((*MockIAccountHandler)(nil).OpenAccount), c)
}

// Transfer mocks base method.
func (m *MockIAccountHandler) Transfer(c v4.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Transfer", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transfer indicates an expected call of Transfer.
func (mr *MockIAccountHandlerMockRecorder) Transfer(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockIAccountHandler)(nil).Transfer), c)
}

// Withdraw mocks base method.
func (m *MockIAccountHandler) Withdraw(c v4.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Withdraw", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Withdraw indicates an expected call of Withdraw.
func (mr *MockIAccountHandlerMockRecorder) Withdraw(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Withdraw", reflect.TypeOf((*MockIAccountHandler)(nil).Withdraw), c)
}
